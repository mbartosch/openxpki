<token_config>

    <token id="default">
        <backend>OpenXPKI::Crypto::Backend::OpenSSL</backend>

        <!-- possible values are OpenSSL, nCipher, LunaCA -->
	<engine>OpenSSL</engine>
        <engine_section></engine_section>
        <key_store>OPENXPKI</key_store>
        <engine_usage></engine_usage>

	<!-- OpenSSL binary location -->
        <shell>[% file.openssl %]</shell>

	<!-- OpenSSL binary call gets wrapped with this command -->
        <wrapper></wrapper>

	<!-- random file to use for OpenSSL        -->
        <!-- <randfile>t/25_crypto/rand</randfile> -->
        <randfile>[% dir.openxpkistatedir %]/rand</randfile>
    </token>

[% FOREACH realmsection = global.pkirealm %]

    [% FOREACH ca = $realmsection.issuingca %]
    
    [% THROW config "No 'id' defined for issuing CA $ca" IF ! $ca.id.defined %]
    [% THROW config "No 'dir' defined for issuing CA $ca" IF ! $ca.dir.defined %]

    <token id="[% $ca.id %]" super="../token{default}">
        <!-- CA key (PEM encoded) -->
        <key>[% $ca.dir %]/cakey.pem</key>

	<!-- CA passphrase fragments -->
        <secret>default</secret>
    </token>
    [% END %]


    [% FOREACH entry = $realmsection.subsystem %]
    
    [% THROW config "No 'id' defined for subsystem $entry" IF ! $entry.id.defined %]
    [% THROW config "No 'dir' defined for subsystem $entry" IF ! $entry.dir.defined %]

    <token id="[% $entry.id %]" super="../token{default}">
        <!-- Backend class -->
        <backend>[% $entry.backend %]</backend>
	
	[% IF $entry.shell.defined %]
        <!-- Backend shell command -->
        <shell>[% $entry.shell %]</shell>
	[% END %]
        [% IF $entry.id != 'testcreatejavakeystore' %]
        <!-- Private key (PEM encoded) -->
        <key>[% $entry.dir %]/key.pem</key>

	<!-- CA passphrase -->
        <secret>default</secret>
        [% END %]
    </token>
    [% END %]


[% END %]

</token_config>
