<acl>
  <!-- Wildcard definition area                             -->
  <!--                                                      -->
  <!-- First we define how wildcards has to be interpreted. -->
  <!-- This is necessary to build a very fast ACL.          -->
  <!-- Internally we extend every wildcard to single entry  -->
  <!-- in the ACL. This allows us to implement the ACL as   -->
  <!-- a very fast three dimensional hash.                  -->

  <!-- we map the server_id (dbi) to a human readable value -->
  <server>
    <!-- offline system if server 1 really exists -->
    <id>0</id>
    <name>CA</name>
  </server>

  <!-- FIXME: perhaps we should define roles somewhere else -->
  <role>User</role>
  <role>RA Operator</role>
  <role>CA Operator</role>
  <role>Web Server</role>
  <role>Sub CA</role>

  <role>System</role>

  <!-- Permissions                                                -->
  <!--                                                            -->
  <!-- This is the real ACL area. Here we define the              -->
  <!--     permissions. A permission consists of four things:     -->
  <!--     1. server                                              -->
  <!--     2. activity                                           -->
  <!--     3. affected_role                                       -->
  <!--     4. auth_role                                           -->
  <!--                                                            -->
  <!--     The server is simply the human readable name of a      -->
  <!--     server or the wildcard '*'. The activity is the        -->
  <!--     correct name of the workflow activity. The             -->
  <!--     affected_role is like the name says the affected role. -->
  <!--     If the CA itself is affected then the value is the     -->
  <!--     empty string. The auth_role is role of the logged in   -->
  <!--     user. This role is determinable from the session.      -->

  <!-- the CA and RA Operator are both allowed everything. There
       permissions only differ on a workflow level and that the RA
       Operator approvals are usually only taken in account for certificate
       request -->
  <permission>
    <server>*</server>
    <activity>*</activity>
    <affected_role>*</affected_role>
    <auth_role>CA Operator</auth_role>
  </permission>
  <permission>
    <server>*</server>
    <activity>*</activity>
    <affected_role>*</affected_role>
    <auth_role>RA Operator</auth_role>
  </permission>
  <!-- everybody can do all service calls -->
  <permission>
    <server>*</server>
    <activity>Service::*</activity>
    <affected_role>*</affected_role>
    <auth_role>*</auth_role>
  </permission>
  <!-- same for the API -->
  <permission>
    <server>*</server>
    <activity>API::*</activity>
    <affected_role>*</affected_role>
    <auth_role>*</auth_role>
  </permission>

  <!-- everybody may store, retrieve and change passwords, the workflow ACL
       checks that only the owner can get to the workflow (except for
       the CA Operator -->
  <permission>
     <server>*</server>
     <activity>Workflow::store_password</activity>
     <affected_role>*</affected_role>
     <auth_role>*</auth_role>
  </permission>

  <permission>
     <server>*</server>
     <activity>Workflow::retrieve_password</activity>
     <affected_role>*</affected_role>
     <auth_role>*</auth_role>
  </permission>

  <permission>
     <server>*</server>
     <activity>Workflow::change_password</activity>
     <affected_role>*</affected_role>
     <auth_role>*</auth_role>
  </permission>

  <permission>
     <server>*</server>
     <activity>Workflow::persist_csr</activity>
     <affected_role>*</affected_role>
     <auth_role>*</auth_role>
  </permission>
  <permission>
     <server>*</server>
     <activity>Workflow::create_crr</activity>
     <affected_role>*</affected_role>
     <auth_role>*</auth_role>
  </permission>

  <!-- allow system user to create CRLs -->
  <permission>
     <server>*</server>
     <activity>Workflow::start_crl_issuance</activity>
     <affected_role>*</affected_role>
     <auth_role>System</auth_role>
  </permission>

  <!-- Workflow permissions: who can create and read which workflows? -->
  <workflow_permissions role="Anonymous"> <!-- aka the empty ('') role -->
      <server name="*">
          <!-- the anonymous user can create and read CSR and CRR workflows
               as well as SCEP on all servers -->
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
          </create>
          <read> <!-- read also means list and execute activity (if the ACL condition holds) -->
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <!-- needed for SCEP to lookup the profile of an existing
               certificate which is to be renewed -->
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
              <context_filter>
                  <show>cert_profile</show>
              </context_filter>
          </read>
      <create>
<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PIN_UNBLOCK</type>
</create>
      <create>
<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PUK_UPLOAD</type>
</create>

<read>
<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PUK_UPLOAD</type>
</read>
<read>
<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PIN_UNBLOCK</type>
</read>
	  
      </server>
  </workflow_permissions>
  <workflow_permissions role="User">
      <!-- someone with a 'User' role can do everything the anonymous
           user can + smartcard personalization -->
      <server name="*">
          <!-- the anonymous user can create and read CSR and CRR workflows
               as well as SCEP on all servers -->
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PERSONALIZATION</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
          </create>
          <read> <!-- read also means list and execute activity (if the ACL condition holds) -->
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
              <context_filter>
                  <show>.*</show>
                  <hide>encrypted_.*</hide>
              </context_filter>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PERSONALIZATION</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>$self</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
              <context_filter>
                  <show>cert_identifier</show>
              </context_filter>
          </read>

	<create>
		<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PIN_UNBLOCK</type>
	</create>
	<create>
		<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PUK_UPLOAD</type>
	</create>
	<read>
		<creator>.*</creator>
		<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PIN_UNBLOCK</type>
	</read>
	<read>
		<creator>.*</creator>
		<type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PUK_UPLOAD</type>
	</read>


      </server>
  </workflow_permissions>
  <workflow_permissions role="RA Operator">
      <server name="*">
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
          </create>
          <read> 
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <!-- this is a policy decision, you may want to show the
                  reg officers who else has approved - or not, so as to not
                  impair his or her judgement -->
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
              <context_filter>
                  <show>.*</show>
                  <hide>approvals</hide>
              </context_filter>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PERSONALIZATION</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
              <context_filter>
                  <show>.*</show>
                  <hide>encrypted_.*</hide>
              </context_filter>
          </read>
      </server>
  </workflow_permissions>
  <workflow_permissions role="CA Operator">
      <!-- the CA operator can do everything the RA Operator can, plus
           creating CRL and certificate issuance workflows -->
      <server name="*">
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_LDAP_PUBLISHING</type>
          </create>
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
          </create>
          <read> 
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_SIGNING_REQUEST</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_REVOCATION_REQUEST</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SCEP_REQUEST</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_SMARTCARD_PERSONALIZATION</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CERTIFICATE_ISSUANCE</type>
          </read>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_PASSWORD_SAFE</type>
          </read>
      </server>
  </workflow_permissions>

  <workflow_permissions role="System"> <!-- system user (via command line) -->
      <server name="*">
          <create>
              <type>I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE</type>
          </create>
          <read>
              <creator>.*</creator>
              <type>I18N_OPENXPKI_WF_TYPE_CRL_ISSUANCE</type>
          </read>
      </server>
  </workflow_permissions>
  <!-- TODO - create role that can only create cert issuance workflow and
       has the necessary ACL rights to do the issuance and escalate to that
       role in the CSR workflow forking step. Similarly for LDAP publication
  -->
</acl>
