<%args>
  $__session_id => undef
  $next_comp    => undef
</%args>
<%perl>
    ## next_comp is used to start a component via a normal web link
    ## somewhere on your portal after the authentication was successful
    if (!defined $next_comp) {
        $next_comp = $m->request_args()->{'next_comp'};
    }
    # if you click on a menu link after logging out, next_comp will
    # contain the __ parameters (__session_id, __language, __role)
    # which will then be in the final link twice - thus we need to
    # clean these up.
    # Note that we do not clean up the __menu_... parameters, as these
    # actually provide useful information on where the user left off ...
    $next_comp =~ s{__language=[^&]*&?}{};
    $next_comp =~ s{__session_id=[0-9a-f]*&?}{};
    $next_comp =~ s{__role=[^&]*&?}{};
    # if only a trailing ? is left, remove that too
    $next_comp =~ s{\?\z}{}xms;

    my $no_menu  = $m->request_args()->{'no_menu'};
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => 'next_comp: ' . defined $next_comp ? $next_comp : 'none'
    );

    ## let's init the environment
    my $result = $m->comp('/authentication/session.mhtml',
             'init'         => 1,
             '__session_id' => $__session_id);
    if (! (exists $context->{client}) ) {
        if (defined $result and length $result and ($result =~ m{ \A E_}xms)) {
            $result =~ s{ \A E_ (.* \z) }{ $1 }xms;
            $result = i18nGettext($result);
        } else {
            $result = '<p>'.i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_SESSION_UNKNOWN_ERROR').'</p>';
        }
        print $result;
        return;
    }

    my $session_id = $context->{session_id};
    my $client     = $context->{client};
    if (! defined $client) {
        return;
    }
    my $msg      = $client->send_receive_service_msg('PING');

    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));

    ## try to ping. if SERVICE_READY is returned, the connection
    ## is working and the user is logged in already
    my $ping_msg = $client->send_receive_service_msg('PING');
    if ($ping_msg->{SERVICE_MSG} eq 'SERVICE_READY') {
        # the connection was actually working when the authentication
        # autohandler was called, it just did not have the session ID
        # in the context. Thus, skip all of the rest and just return
        # 'CONNECTION_WORKING', which will be handled by the toplevel
        # autohandler appropriately (just show the component the user
        # came for)
    	$m->comp('/authentication/role.mhtml', 'msg' => $msg);
        print "CONNECTION_WORKING";
        return;
    }
    ## check the message
    if (! defined $msg &&
        $client->get_communication_state ne "can_receive" &&
        ! $client->is_connected()
    ) {
        ## let's kill the connection and start again
        $m->comp ('/lib/debug.mhtml',
                 'level' => 2,
                 'msg'   => 'starting over ...');
        delete $context->{client};
        $m->comp('/authentication/session.mhtml');
        $session_id = $context->{session_id};
        $client     = $context->{client};
        $msg        = $context->{msg} if (exists $context->{msg});
    }
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/pki_realm.mhtml',  'msg' => $msg);
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/auth_stack.mhtml',
            'msg' => $msg,
            'next_comp' => $next_comp,
            'no_menu'  => $no_menu,
    );
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/passwd.mhtml',
                        'msg'      => $msg,
                        'next_comp' => $next_comp,
                        'no_menu'  => $no_menu,
    );
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/x509.mhtml',
                        'msg'      => $msg,
                        'next_comp' => $next_comp,
                        'no_menu'  => $no_menu,
    );
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/sso.mhtml',
                        'msg'      => $msg,
                        'next_comp' => $next_comp,
                        'no_menu'  => $no_menu,
    );
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $msg = $m->comp('/authentication/x509_webserver.mhtml',
                        'msg'      => $msg,
                        'next_comp' => $next_comp,
                        'no_menu'  => $no_menu,
    );
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    $m->comp('/authentication/role.mhtml', 'msg' => $msg);
    $m->comp ('/lib/debug.mhtml',
              'level' => 99,
              'msg'   => Dumper($context->{msg}));
    #print STDERR "session_id ::= ".$context->{session_id}."\n";

    ## msg can be undef on relaod
    if ((exists $msg->{SERVICE_MSG} && 
         defined $msg->{SERVICE_MSG} &&
         $msg->{SERVICE_MSG} eq "SERVICE_READY") ||
        ! defined $msg)
    {
        my $session;
        if (defined $__session_id && exists $ENV{OPENXPKI_MASON_SESSION_DIR}) {
            # try to create a CGI::Session object only if we have a
            # session ID and configuration for a client side session directory
            $session = CGI::Session->new(
              'id:static',
              $__session_id,
              {
                  Directory => $ENV{OPENXPKI_MASON_SESSION_DIR},
              },
            );
        }
        if (defined $session) {
            $session->param(
                'user' =>
                $context->{client}->send_receive_command_msg('get_user')->{PARAMS}
            );
            $session->param(
                'role' =>
                $context->{client}->send_receive_command_msg('get_role')->{PARAMS}
            );
            $session->param(
                'pki_realm' =>
                $context->{client}->send_receive_command_msg('get_pki_realm')->{PARAMS}
            );
            $session->expire('+1d');
            $session->flush();
            $m->comp ('/lib/debug.mhtml',
                      'level' => 5,
                      'msg'   => "CGI::Session created for $__session_id, object id: " . $session->id());
        }
        print "REDIRECT_TO_SERVICE_AUTOHANDLER";
    }
    elsif ($msg->{SERVICE_MSG} eq "ERROR")
    {
        # something went wrong during the authentication ...
        # we have to delete the cookie, because otherwise one might be
        # stuck in a state of authentication from which one can not return
        # - say a user accidentally chose the 'Operator' stack. If we
        # do not delete the cookie, he will present a valid session ID
        # for a session that asks for an operator password, which the user
        # does not have ...
        my $cookies = CGI::Cookie->fetch();
        if (defined $cookies && exists $cookies->{'openxpki_sessionid'}) {
            # session ID cookie exists, we have to delete it
            # a cookie with a negative expiration date is equivalent to
            # deleting it ...
            my $c = CGI::Cookie->new(
                -name    => 'openxpki_sessionid',
                -expires => '-1M',
                -path    => '/',
            );
            $r->headers_out->set('Set-Cookie' => $c);
        }
        $m->comp ('/service/create_csr/print_errors.mhtml',
                  'errors' => [ $m->comp ('/lib/get_deep_error.mhtml', 'msg' => $msg) ]);
        $m->comp ('/service/loginagain.html');
    }
    $m->comp ('/lib/debug.mhtml',
              'level' => 1,
              'msg'   => "authentication autohandler finished");


</%perl>
<%init>
  $r->content_type('text/html; charset=utf-8');
</%init>
<%once>
  use Data::Dumper;
</%once>
