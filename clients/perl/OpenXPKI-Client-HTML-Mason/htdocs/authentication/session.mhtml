<%args>
    $__session_id => undef
    $init         => 0
</%args>
<%init>
  use CGI::Cookie;

  $m->comp ('/lib/debug.mhtml',
            level => 1,
            msg   => "try to get session\n");

  $m->comp ('/lib/debug.mhtml',
      level => 2,
      msg   => "__session_id::=" 
        .  (defined $__session_id ? $__session_id : 'none' ) . "\n"
        . 'context->session_id::=' 
        . (defined $context->{session_id} ? $context->{session_id} : 'none'),
  );

  if (! defined $__session_id) {
      # session_id is not defined, let's have a look if the user
      # presents it to us in a cookie
      $m->comp ('/lib/debug.mhtml',
            level => 2,
            msg   => "session id not defined, trying cookies",
      );
      my $cookies = CGI::Cookie->fetch();
      my $cookie;
      if (defined $cookies) {
          $m->comp ('/lib/debug.mhtml',
              level => 2,
              msg   => 'cookies received',
          );
          $cookie = $cookies->{'openxpki_sessionid'};
      }
      if (defined $cookie) {
          # use the session id from the cookie from now on
          $m->comp ('/lib/debug.mhtml',
              level => 2,
              msg   => 'session_id cookie defined, using it',
          );
          $__session_id = $cookie->value();
          undef $context->{msg};
      }
  }
  ## prepare the context if necessary
  if (defined $__session_id and
      exists $session_cache{$__session_id})
  {
      $m->comp ('/lib/debug.mhtml',
         level => 2,
         msg   => 'session cache exists, updating context',
      );
      ## the session ID is defined an it is cached
      ## we have to update the context appropriately
      $context = $session_cache{$__session_id};
      $m->comp ('/lib/debug.mhtml',
                level => 2,
                msg   => "__session_id::=".$__session_id."\n".
                         "context->session_id::=".$context->{session_id});
  } else {
      $m->comp ('/lib/debug.mhtml',
         level => 2,
         msg   => 'session cache does not exist, clearing context',
      );
      undef $context;
  }
      
  # check if we are using an already existing session
  # check if the session has working connection
  my $is_logged_in;
  if (defined $context && exists $context->{client}) {
      $is_logged_in = $context->{client}->is_logged_in();
  }
  if (defined $context &&
      exists $context->{session_id} &&
      defined $is_logged_in &&
      $is_logged_in == 1)
  {
      $m->comp ('/lib/debug.mhtml',
         level => 2,
         msg   => 'reusing existing connection',
      );
      # this session has already been established and is in the context
      # we ignore the context if the client connection is down
      return 1;
  }

  # FIXME: don't use environment but rather a proper configuration
  my $socketfile = $ENV{OPENXPKI_SOCKET_FILE};
  my $client;
  eval {
      $client = OpenXPKI::Client::HTML::Mason->new(
          {
              SOCKETFILE   => $socketfile,
              TIMEOUT      => 120,
          });
  };
  if (my $exc = OpenXPKI::Exception->caught()) {
        if ($exc->message() eq 'I18N_OPENXPKI_CLIENT_INIT_CONNECTION_FAILED') {
            # if we can not connect to the server, tell the user so
            return 'E_'.'<h1>' . i18nGettext('I18N_OPENXPKI_HTML_MASON_SERVER_DOWN_TITLE') . '</h1><p>' . i18nGettext('I18N_OPENXPKI_HTML_MASON_SERVER_DOWN_DESC') . '</p>';
        }
        else {
            # otherwise, just rethrow, this is an internal error that the
            # user is not supposed to see
            $exc->rethrow();
        }
  }
  elsif ($EVAL_ERROR) {
    return 'E_'.'<p>'.$EVAL_ERROR.'</p>';
  }

  my %args;
  if (defined $__session_id) {
      # this may happen after a restart: the client still knows its session
      # ID, but we were restarted and the session cache is empty.
      # try to recreate the session based on the given session_id.
      eval {
          $m->comp ('/lib/debug.mhtml',
            level => 5,
            msg   => 'context defined? ' . (defined $context ? 1 : 0),
          );
          $m->comp ('/lib/debug.mhtml',
            level => 5,
            msg   => 'context{session_id} exists? ' . (exists $context->{session_id} ? 1 : 0),
          );
          $m->comp ('/lib/debug.mhtml',
            level => 5,
            msg   => 'context{client} exists? ' . (exists $context->{client} ? 1 : 0),
          );
          if (exists $context->{client}) {
              $m->comp ('/lib/debug.mhtml',
                level => 5,
                msg   => 'context{client}->is_connected: ' . $context->{client}->is_connected(),
              );
          }
          $m->comp ('/lib/debug.mhtml',
            level => 2,
            msg   => 'trying to init_session with new client ...',
          );
          $client->init_session({SESSION_ID => $__session_id});
      };
      if (($EVAL_ERROR) or (($client->is_logged_in() != 1) and ($m->request_comp()->title() !~ /\/authentication\//)))
      {
          ## kill the session
          ## usually this is a timeout of the session
          ## disconnect the client to make a clean start
          undef $context;
          undef $client;
          $m->comp ('/lib/debug.mhtml',
            level => 2,
            msg   => 'eval error in init_session: ' . $EVAL_ERROR,
          );
          return undef if (not $init);
          eval {
              $client = OpenXPKI::Client::HTML::Mason->new(
                        {
                            SOCKETFILE => $socketfile,
                            TIMEOUT    => 120,
                       });
          };
          if ($EVAL_ERROR) {
              return 'E_'.'<p>'.$EVAL_ERROR.'</p>';
          }
          eval {
              $client->init_session();
          };
          if ($EVAL_ERROR) {
              return 'E_'.'<p>'.$EVAL_ERROR.'</p>';
          }
          $m->comp ('/lib/debug.mhtml',
            level => 2,
            msg   => 'init was defined, new client object created and init_session_called',
          );
      }
  } else {
      eval {
          $client->init_session();
      };
      if ($EVAL_ERROR) {
          return 'E_'.'<p>'.$EVAL_ERROR.'</p>';
      }
  }
  $__session_id = $client->get_session_id();
  $session_cache{$__session_id}->{client} = $client;
  $session_cache{$__session_id}->{session_id} = $__session_id;
  $context = $session_cache{$__session_id};

  # set the session ID in a cookie, too
  # TODO - specify a better path than /?
  my $secure = 0;
  if (exists $ENV{'HTTPS'}) {
        # we are using HTTPS, so set the secure flag of the cookie to
        # make sure it is only sent back over HTTPS, too (prevents
        # against a "Surf Jacking" attack)
        $secure = 1;
  }
  my $c = CGI::Cookie->new(
    -name   => 'openxpki_sessionid',
    -value  => $__session_id,
    -path   => '/', 
    -secure => $secure,
  );
  $r->headers_out->set('Set-Cookie' => $c);

  $m->comp ('/lib/debug.mhtml',
            'level' => 1,
            'msg'   => 'finished with session_id '.$context->{session_id});

   ## bring the interface in a safe state if necessary
   $context->{msg} = $context->{client}->collect()
       if ($context->{client}->get_communication_state() eq "can_receive");

   ## the message is get_pki_realm, get_auth_stack, login or service_ready
   return $__session_id;
</%init>
