<%args>
    $workflow_type => undef
    $role          => undef
    $profile       => undef
    $subject_style => undef
    $keygen        => undef
    $pkcs10        => undef
    $subject       => undef
    $CONFIG        => undef
</%args>
<style type="text/css">
<!--
#main tr.highlight_error {
    background: #ff8888;
}
-->
</style>
<& /service/open_form.mhtml &>
<& /lib/html/hidden.mhtml, 'name' => '__filled_in', value => '1' &>
% if ($keygen eq 'PKCS10' && ! exists $req_args->{pkcs10}) {
<& /lib/html/hidden.mhtml, 'name' => 'pkcs10', value => $pkcs10 &>
% }
<& /lib/html/hidden_reqargs.mhtml, ignore => qr(\A cert_subject_)xms &>

<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_DESCRIPTION') %>
</p>

<table>
% foreach my $input (@input) {
%    my $optional   = 0;
%    my $no_default = 0;
%    my $min;
%    my $default = [];
%    my $req = $req_args->{'cert_subject_' . $input->{ID}};
%    if (exists $input->{MIN}) {
%         $min = $input->{MIN};
%         if ($min == 0) {
%             $min = 1;      # we want to show a field, even though it
%             $optional = 1; # is optional
%         }
%    }
%    if (defined $req) {
%        # if a request arg exists, use it as a default
%        if (! ref $req) {
%           $default->[0] = $req;
%        }
%        elsif (ref $req eq 'ARRAY') {
%           $default = $req;
%        }
%    }
%    elsif (exists $input->{DEFAULT}) {
%       # if it does not exist, use the configured default if available
%       $default->[0] = $input->{DEFAULT};
%       if (defined $min) {
%            # if min is defined, we might need more than one field for this
%            my @tmp_array = ();
%            for (my $i = 0; $i < $min; $i++) {
%                $tmp_array[$i] = $input->{DEFAULT};
%            }
%            $default = \@tmp_array;
%       }
%    } 
%    else {
%       $no_default = 1;
%       if (defined $min) {
%            my @tmp_array = ();
%            for (my $i = 0; $i < $min; $i++) {
%                $tmp_array[$i] = '';
%            }
%            $default = \@tmp_array;
%       }
%       else {
%           $default->[0] = '';
%       }
%    }
%    if ($input->{TYPE} eq 'freetext') {
%        my $width = 40;
%        if (exists $input->{WIDTH}) {
%           $width = $input->{WIDTH};
%        } 
%        my $hl_err = $error_highlight->{$input->{ID}};
%        for (my $i = 0; $i < scalar @{ $default }; $i++) {
%           if (    (! ref $hl_err && $hl_err)
%                || (ref $hl_err eq 'ARRAY' && $hl_err->[$i])) {
      <tr class="highlight_error">
%           }
%           else {
      <tr>
%           }
        <td>
            <% i18nGettext($input->{LABEL}) %>
%        if ($optional) {
            (<% i18nGettext('I18N_OPENXPKI_OPTIONAL') %>)
%        }
        </td>
        <td><& /lib/html/input.mhtml,
                name  => 'cert_subject_' . $input->{ID},
                value => $default->[$i],
                width => $width, 
             &>
% # if  MAX is defined, we might want to offer the user more fields
% # of this type (only shown on the last input field)
%         if (exists $input->{MAX}
%              && scalar @{ $default } < $input->{MAX}
%              && scalar @{ $default } - 1 == $i) {
            <input type="submit" name="__add_<% $input->{ID} %>" value="<% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_MORE_FIELDS') %>"> 
%         }
        </td>
      <tr>
%        }
%    }
%    elsif ($input->{TYPE} eq 'select') {
%       my @values = ();
%       if ($optional) {
%           push @values, {
%                 VALUE => '',
%                 LABEL => 'I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_NO_VALUE_OPTIONAL',
%           };
%       }
%       foreach my $value (@{ $input->{OPTIONS} }) {
%            push @values, {
%                VALUE => $value,
%                LABEL => $value,
%            };
%       }
      <tr>
        <td><% i18nGettext($input->{LABEL}) %></td>
        <td>
%         if (! $no_default) {
            <& /lib/html/select.mhtml,
                name    => 'cert_subject_' . $input->{ID},
                values  => \@values,
                default => $default,
            &>
%         }
%         else {
            <& /lib/html/select.mhtml,
                name    => 'cert_subject_' . $input->{ID},
                values  => \@values,
            &>
%         }
        </td>
       </tr>
%    }
% }
</table>

<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>

<& /service/create_csr/print_errors.mhtml, 'errors' => \@errors &>
<& /service/create_csr/print_descriptions.mhtml, 'descriptions' => \%descriptions &>

<%init>
    my $error_highlight;

    # TODO - use $subject to create parts based on the PKCS#10 data

    # combine request args to subject_parts hashref
    # and copy request args to req_args hashref
    my $subject_parts;
    my $req_args = {};
    foreach my $key (keys %{ $m->request_args() }) {
        if ($key =~ m{ \A cert_subject_ }xms) {
            my $subject_part_value = $m->request_args()->{$key};
            Encode::_utf8_on($subject_part_value);
            $subject_parts->{$key} = $subject_part_value;
        }
        $req_args->{$key} = $m->request_args()->{$key};
    }
#    if (exists $req_args->{'__san_filled'}) {
#        # TODO -  maybe we need to check something else if SAN editing is
#        # not required
#        return $subject_parts;
#    }

    # check if an __add_something button was pressed
    foreach my $key (keys %{ $req_args }) {
        if ($key =~ m{ \A __add_ }xms) {
            my ($part) = ($key =~ m{ \A __add_(.+) \z }xms);
            my $part_content = $req_args->{'cert_subject_' . $part};
            if (! ref $part_content) {
                # part content was scalar, should now be a 2-elt arrayref
                
                $req_args->{'cert_subject_' . $part} = [ $part_content, '' ];
            }
            elsif (ref $part_content eq 'ARRAY') {
                # part content was an arrayref, add empty elt to the end
                push @{ $req_args->{'cert_subject_' . $part}}, '';
            }
        }
    }


    my $chosen_style = $req_args->{'subject_style'};
    my @errors = ();
    my %styles = ();


    # load available subject styles for this profile from server


    my $params = {
        PROFILE => $profile,
    };
    if (defined $pkcs10) {
        $params->{PKCS10} = $pkcs10;
    }
    my $msg = $context->{client}->send_receive_command_msg(
                   "get_cert_subject_styles",
                   $params,
    );
    if (defined $msg->{PARAMS} && ref $msg->{PARAMS} eq 'HASH') {
        %styles = %{$msg->{PARAMS}};
    }
    if (! defined $chosen_style && (scalar keys %styles == 1)) {
        # fallback if subject_style not defined and only one possible
        # style present
        foreach my $key (keys %styles) {
            $chosen_style = $key;
        }
    }
    # TODO - error handling
    my @input  = @{ $styles{$chosen_style}->{TEMPLATE}->{INPUT} };

    #####################################################
    ##    build a description for every form field     ##
    #####################################################

    my %descriptions = ();
    foreach my $input (@input) {
        $descriptions{i18nGettext($input->{LABEL})} =
                i18nGettext($input->{DESCRIPTION});
    }
 
    #######################################
    ##     let it scan by the server     ##
    #######################################

    ## let the server validate the subject parts
    if (defined $subject_parts
        && ! scalar @errors #) {
        && ! grep m{ \A __add_ }xms, keys %{ $m->request_args() }) {
        my $msg = $m->comp ('/service/create_csr/create_workflow.mhtml',
                            'workflow_type' => $workflow_type,
                            'role'          => $role,
                            'profile'       => $profile,
                            'subject_style' => $subject_style,
                            'keygen'        => $keygen,
                            'subject_parts' => $subject_parts);
        ## perhaps we should put this into a component like get_error.mhtml?
        if (ref $msg and ref $msg eq "ARRAY" and
            $msg->[0]->{LABEL} ne 'I18N_OPENXPKI_SERVER_API_WORKFLOW_MISSING_REQUIRED_FIELDS')
        {
            ## this must be an error
            push @errors, @{$msg};
        }
        else {
            return $subject_parts;
        }
        foreach my $error (@errors) {
            if ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_PART_NOT_AVAILABLE_BUT_REQUIRED') {
                # highlight the whole part
                $error_highlight->{$error->{PARAMS}->{PART}} = 1;
            }
            elsif ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_TOO_LITTLE_ELEMENTS') {
                # highlight those that still need to be filled out
                for (my $i = $error->{PARAMS}->{AMOUNT}; $i < $error->{PARAMS}->{MIN}; $i++) {
                    $error_highlight->{$error->{PARAMS}->{PART}}->[$i] = 1;
                }
            }
            elsif ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_DID_NOT_MATCH_REGEX') {
                # highlight the one that did not match
                $error_highlight->{$error->{PARAMS}->{PART}}->[$error->{PARAMS}->{INDEX}] = 1;
            }
        }
    }

    ###############################
    ##     decide what to do     ##
    ###############################

</%init>
<%once>
    use Encode;
</%once>
