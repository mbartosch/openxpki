<%args>
    $workflow_id   => undef
    $workflow_type => undef
    $role          => undef
    $profile       => undef
    $subject_style => undef
    $keygen        => undef
    $pkcs10        => undef
    $subject       => undef
    $subject_alt_name => undef
    $info          => undef
    $CONFIG        => undef
    $password_gen => undef,
    $password     => undef,
    $keytype      => undef,
    $keyparameters    => undef,
    $msg              => undef,
    $error            => undef,
    $verify_password  => undef,
</%args>
<& /service/open_form.mhtml &>

<& /lib/html/hidden_reqargs.mhtml, ignore => qr(\A (?:keyparameters|password_gen|password|verify_password) \z)xms &>
<& /lib/html/hidden.mhtml, name => 'keyparameters', value => $keyparameters &>
% if (! defined $password_gen) {
<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_GENERATION_METHOD_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_GENERATION_METHOD_DESC') %>
</p>

<table>
  <tr>
    <td>
      <% i18nGettext ("I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_DECISION") %>
    </td>
    <td>
      <& '/lib/html/select.mhtml',
         'name'    => "password_gen",
         'values'  => [ {
            VALUE => 'generate',
            LABEL => 'I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GEN_PASSWORD_SERVERSIDE',
        },
        {
            VALUE => 'enter',
            LABEL => 'I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GEN_PASSWORD_ENTER_PASSWORD',
        },
        ]
    &>
    </td>
  </tr>
</table>

<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>

% }
% elsif ($password_gen eq 'enter') {
% # Ask the user for the password
<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_ENTER_PASSWORD_TITLE') %></h1>
<p>
% if (exists $msg->{'SERVICE_MSG'} &&
%            $msg->{'SERVICE_MSG'} eq 'ERROR' &&
%            $msg->{LIST}->[0]->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_PASSWORD_QUALITY_BAD_PASSWORD') {
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_PASSWORD_BAD_RETRY') %>
% }
% else {
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_ENTER_PASSWORD_DESC') %>
% }
</p>
<& /lib/html/hidden.mhtml, 'name' => 'password_gen', 'value' => $password_gen &>
<table>
  <tr>
    <td>
      <% i18nGettext ("I18N_OPENXPKI_CLIENT_HTML_MASON_PASSWD") %>
    </td>
    <td>
      <& '/lib/html/input.mhtml',
         'name'    => "password", &>
    </td>
  </tr>
</table>
<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>
<p>
<% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_PASSWORD_POLICY') %>
</p>
% }
% elsif ($password_gen eq 'generate') {
% # generate the password on the server and let the user re-enter it to
% # verify he has noted it (well, experience shows that even that does not help)
<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_GENERATED_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PASSWORD_GENERATED_DESC') %>
</p>
<& /lib/html/hidden.mhtml, 'name' => 'password_gen', 'value' => $password_gen &>
% my $msg = $context->{client}->send_receive_command_msg(
%   'get_random',
%   {
%       LENGTH => $PASSWORD_LENGTH,
%   },
% );
% my $random = $msg->{PARAMS};
% # make the password more readable by replacing similarly-looking chars
% $random =~ s/I/%/g;
% $random =~ s/L/\$/g;
% $random =~ s/l/\?/g;
% $random =~ s/1/\*/g;
% $random =~ s/0/~/g;
% $random =~ s/O/\#/g;
% if ($verify_password) {
%     # this is the error case, use the previously generated one again
%     $random = $verify_password;
% }
% if ($error) {
<p>
<b><% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_PASSWORD_VERIFY_PASSWORD_INCORRECT_PASSWORD') %></b>
</p>
% }
<& /lib/html/hidden.mhtml, 'name' => 'verify_password', 'value' => $random &>
% # this is no STRONG enforcement, if you want strong enforcement that
% # the generated password is used, this has to be rewritten
<table>
  <tr>
    <td><% i18nGettext ("I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_PASSWORD_GENERATED_PASSWORD") %></td>
    <td><b><% $random %></b></td>
  </tr>
    <td>
      <% i18nGettext ("I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_PASSWORD_COPY_HERE") %>
    </td>
    <td>
      <& '/lib/html/input.mhtml',
         'name'    => "password", &>
    </td>
  </tr>
</table>
<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>
% }

<& /service/create_csr/print_errors.mhtml, 'errors' => \@errors &>

<%init>
    my $PASSWORD_LENGTH = 16;
    my @errors = ();

    if (exists $msg->{SERVICE_MSG} && 
               $msg->{SERVICE_MSG} eq 'ERROR') {
        @errors = $m->comp(
            '/lib/get_deep_error.mhtml',
            'msg' => $msg,
        );
    }
    elsif ($password)
    {
        return $password;
    }
    ## ok we have to display the whole stuff

</%init>
