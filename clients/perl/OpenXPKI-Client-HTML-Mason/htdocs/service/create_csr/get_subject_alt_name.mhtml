<%args>
    $workflow_type => undef
    $role          => undef
    $profile       => undef
    $subject_style => undef
    $keygen        => undef
    $pkcs10        => undef
    $subject       => undef
    $subject_alt_name => undef
    $CONFIG        => undef
    $additional_entries => 0
</%args>
%#<% Dumper $m->request_args() %>
%#<% Dumper $req_args %>
%#<% Dumper $template_vars %>
%#<% Dumper \@sans %>
<& /service/open_form.mhtml &>
<& /lib/html/hidden_reqargs.mhtml, ignore => qr(\A cert_subject_alt_name_ )xms &>
<& /lib/html/hidden.mhtml, 'name' => '__san_filled', 'value' => 1 &>

<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_ALT_NAME_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_ALT_NAME_DESCRIPTION') %>
</p>
<table>
% foreach my $san (@sans) {
%    if ($san->{KEY}->{TYPE} eq 'fixed') {
        <tr>
            <td><% $san->{KEY}->{VALUE} %></td>
            <td><% $san->{VALUE}->{VALUE} %></td>
        </tr>
%    }
%    elsif ($san->{KEY}->{TYPE} eq 'select' || $san->{KEY}->{TYPE} eq 'oid') {
%       my @values = ();
%       if ($san->{KEY}->{TYPE} eq 'select') {
%           foreach my $option (@{ $san->{KEY}->{OPTIONS} }) {
%               push @values, {
%                   VALUE => $option->{VALUE},
%                   LABEL => $option->{LABEL},
%               };
%           }
%       }
%       if (! ref $san->{KEY}->{VALUE}) { # scalar case, make it arrayref
%           $san->{KEY}->{VALUE}   = [ $san->{KEY}->{VALUE} ];
%           $san->{VALUE}->{VALUE} = [ $san->{VALUE}->{VALUE} ];
%       }
%       for (my $i = 0; $i < scalar @{ $san->{KEY}->{VALUE} }; $i++) {
            <tr>
                <td><!-- KEY -->
%           if ($san->{KEY}->{TYPE} eq 'select') {
                    <& /lib/html/select.mhtml,
                        'name'    => 'cert_subject_alt_name_'
                                        . $san->{ID} . '_key',
                        'values'  => \@values,
                        'default' => [ $san->{KEY}->{VALUE}->[$i] ],
                    &>
%           }
%           else {
                <% i18nGettext('I18N_OPENXPKI_SAN_OID') %>:
                <& /lib/html/input.mhtml,
                'name'  => 'cert_subject_alt_name_' . $san->{ID} . '_key',
                'width' => $san->{KEY}->{WIDTH},
                'value' => $san->{KEY}->{VALUE}->[$i],
                &>
%           }
                </td>
                <td><!-- VALUE -->
%            if ($san->{VALUE}->{TYPE} eq 'freetext') {
                <& /lib/html/input.mhtml,
                        'name'   => 'cert_subject_alt_name_'
                                        . $san->{ID} . '_value',
                        'width'  => $san->{VALUE}->{WIDTH},
                        'value'  => $san->{VALUE}->{VALUE}->[$i],
                 &>
%            }
%            # TODO - elsif 'select'
%            if (scalar @{ $san->{KEY}->{VALUE} } < $san->{KEY}->{MAX} &&
%                scalar @{ $san->{KEY}->{VALUE} } - 1 == $i) {
                <input type="submit" name="__san_add_<% $san->{ID} %>_5" value="<% i18nGettext("I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_SAN_ADD_5") %>">
%            }
                </td>
            </tr>
%        }
%    }
%    elsif ($san->{KEY}->{TYPE} eq 'oid') {
        <tr>
            <td><% i18nGettext('I18N_OPENXPKI_SAN_OID') %>:
                <& /lib/html/input.mhtml,
                'name'  => 'cert_subject_alt_name_' . $san->{ID} . '_key',
                'width' => $san->{KEY}->{WIDTH},
                'value' => $san->{KEY}->{VALUE},
                &>
            </td>
            <td>
              <& /lib/html/input.mhtml,
                    'name'   => 'cert_subject_alt_name_'
                                    . $san->{ID} . '_value',
                    'width'  => $san->{VALUE}->{WIDTH},
                    'value'  => $san->{VALUE}->{VALUE}, 
               &>
            </td>
        </tr>
%    }
% }
</table>
<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>

<& /service/create_csr/print_errors.mhtml, 'errors' => \@errors &>
<& /service/create_csr/print_descriptions.mhtml, 'descriptions' => \%descriptions &>

<%init>
    my $error_highlight;

    my ($id, $amount);
    my $san_parts;
    my $subject_parts;

    my $req_args = {};
    # copy $m->request_args to $req_args
    # and combine them to subject_parts and san_parts
    foreach my $key (keys %{ $m->request_args() }) {
        if ($key =~ m{ \A cert_subject_alt_name_ }xms) {
            $san_parts->{$key} = $m->request_args()->{$key};
        }
        if ($key =~ m{ \A cert_subject_ }xms) {
            $subject_parts->{$key} = $m->request_args()->{$key};
        }
        $req_args->{$key} = $m->request_args()->{$key};
    }
    # check if a __san_add_something button was pressed
    foreach my $key (keys %{ $req_args }) {
        if ($key =~ m{ \A __san_add_ }xms) {
            ($id, $amount) = ($key =~ m{ \A __san_add_(.+)_(\d+) \z }xms);
            my $id_content_key   = $req_args->{'cert_subject_alt_name_' . $id . '_key'};
            my $id_content_value = $req_args->{'cert_subject_alt_name_' . $id . '_value'};
            if (! ref $id_content_key) {
                # id content was scalar, make it a one-element arrayref
                $req_args->{'cert_subject_alt_name_' . $id . '_key'} = [ $id_content_key ];
                $req_args->{'cert_subject_alt_name_' . $id . '_value'} = [ $id_content_value ];
            }
            # add empty elts to the end
            for (my $i = 0; $i < $amount; $i++) {
                push @{ $req_args->{'cert_subject_alt_name_' . $id . '_key'} }, '';
                push @{ $req_args->{'cert_subject_alt_name_' . $id . '_value'} }, '';
            }
        }
    }


    my $chosen_style = $req_args->{'subject_style'};
    my @errors = ();
    my %styles = ();
    my $interaction_required = 0;


    # load available subject styles for this profile from server

    my $params = {
        PROFILE => $profile,
    };
    if (defined $pkcs10) {
        $params->{PKCS10} = $pkcs10;
    }
    my $msg = $context->{client}->send_receive_command_msg(
                   "get_cert_subject_styles",
                   $params,
    );
    if (defined $msg->{PARAMS} && ref $msg->{PARAMS} eq 'HASH') {
        %styles = %{$msg->{PARAMS}};
    }
    if (! defined $chosen_style && (scalar keys %styles == 1)) {
        # fallback if subject_style not defined and only one possible
        # style present
        foreach my $key (keys %styles) {
            $chosen_style = $key;
        }
    }
    # TODO - error handling
    my @sans = ();
    if (exists $styles{$chosen_style}->{SUBJECT_ALTERNATIVE_NAMES}) {
        @sans = @{ $styles{$chosen_style}->{SUBJECT_ALTERNATIVE_NAMES} };
    }

    if ($req_args->{'__san_filled'}) {
        # if the form was filled before, fill the san array with the
        # values from the request arguments
        foreach my $san (@sans) {
            my $id = $san->{ID};
            my $key_key   = 'cert_subject_alt_name_' . $id . '_key';
            my $value_key = 'cert_subject_alt_name_' . $id . '_value';
            if (exists $req_args->{$key_key}) {
                $san->{KEY}->{VALUE} = $req_args->{$key_key};
            }
            if (exists $req_args->{$value_key}) {
                $san->{VALUE}->{VALUE} = $req_args->{$value_key};
            }
        }
    }
    #####################################################
    ##    build a description for every form field     ##
    #####################################################

    my %descriptions = ();
    foreach my $san (@sans) {
        if ($san->{KEY}->{TYPE} eq 'select') {
            foreach my $option (@{ $san->{KEY}->{OPTIONS} }) {
                $descriptions{i18nGettext($option->{LABEL})} =
                    i18nGettext($option->{DESCRIPTION});
            }
            # if there is something to select, we want the user
            # to be able to chose it
            $interaction_required = 1;
        }
        elsif ($san->{KEY}->{TYPE} eq 'oid') {
            $descriptions{i18nGettext('I18N_OPENXPKI_SAN_OID')} =
                i18nGettext('I18N_OPENXPKI_SAN_OID_DESCRIPTION');
            $interaction_required = 1;
        }
    }
    return 1 if (! $interaction_required);
    
    # template evaluation for 'fixed' SANs
    my $template_vars = {};
    foreach my $key (keys %{ $req_args }) {
        if (   ($key =~ m{ \A cert_subject_ }xms)
            && ($key !~ m{ \A cert_subject_alt_name_ }xms)) {
            my ($template_key) = ($key =~ m{ \A cert_subject_(.*) \z }xms);
            $template_vars->{$template_key} = $req_args->{$key};
        }
    }
    foreach my $san (@sans) {
        if ($san->{KEY}->{TYPE} eq 'fixed') {
            my $template = '[% TAGS [- -] -%]' . $san->{VALUE}->{TEMPLATE};
            my $tt = Template->new();
            my $result = '';
            $tt->process(\$template, $template_vars, \$result);
            $san->{VALUE}->{VALUE} = $result;
        }
    }

    ## let the server validate the subject parts
    if (defined $san_parts
        && ! scalar @errors # ) {
        && ! grep m{ \A __san_add_ }xms, keys %{ $m->request_args() }) {
        my $msg = $m->comp ('/service/create_csr/create_workflow.mhtml',
                            'workflow_type'          => $workflow_type,
                            'role'                   => $role,
                            'profile'                => $profile,
                            'subject_style'          => $subject_style,
                            'keygen'                 => $keygen,
                            'pkcs10'                 => $pkcs10,
                            'subject_parts'          => $subject_parts,
                            'subject_alt_name_parts' => $san_parts,
        );
        ## perhaps we should put this into a component like get_error.mhtml?
        if (ref $msg and ref $msg eq "ARRAY" and
            $msg->[0]->{LABEL} ne 'I18N_OPENXPKI_SERVER_API_WORKFLOW_MISSING_REQUIRED_FIELDS')
        {
            ## this must be an error
            push @errors, @{$msg};
        }
        else {
            return $subject_parts;
        }
        foreach my $error (@errors) {
            if ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_PART_NOT_AVAILABLE_BUT_REQUIRED') {
                # highlight the whole part
                $error_highlight->{$error->{PARAMS}->{PART}} = 1;
            }
            elsif ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_TOO_LITTLE_ELEMENTS') {
                # highlight those that still need to be filled out
                for (my $i = $error->{PARAMS}->{AMOUNT}; $i < $error->{PARAMS}->{MIN}; $i++) {
                    $error_highlight->{$error->{PARAMS}->{PART}}->[$i] = 1;
                }
            }
            elsif ($error->{LABEL} eq 'I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_CERTSUBJECTPARTS_DID_NOT_MATCH_REGEX') {
                # highlight the one that did not match
                $error_highlight->{$error->{PARAMS}->{PART}}->[$error->{PARAMS}->{INDEX}] = 1;
            }
        }
    }

#    my $ARGS   = {$m->request_args()};
#
#    # try to build subject alt name
#    if (not defined $subject_alt_name)
#    {
#        my $range = scalar @{$CONFIG->{$subject_style}->{SUBJECT_ALT_NAME}} + $additional_entries;
#        my @list  = ();
#        for (my $i=0; $i < $range; $i++)
#        {
#            ## check the field is filled
#            next if (not exists $ARGS->{"SUBJECT_ALT_NAME_${i}_TYPE"});
#            next if (not length $ARGS->{"SUBJECT_ALT_NAME_${i}_TYPE"});
#            next if (not exists $ARGS->{"SUBJECT_ALT_NAME_${i}_VALUE"});
#            next if (not length $ARGS->{"SUBJECT_ALT_NAME_${i}_VALUE"});
#            my $type  = $ARGS->{"SUBJECT_ALT_NAME_${i}_TYPE"};
#            my $value = $ARGS->{"SUBJECT_ALT_NAME_${i}_VALUE"};
#
#            ## accept the value
#            push @list, [ $type, $value ];
#        }
#        if ($ARGS->{"FILLED_SUBJECT_ALT_NAME_FORM"})
#        {
#            ## warnings we must be safe against \n truncation
#            my $serializer = OpenXPKI::Serialization::Simple->new({SEPARATOR => "-"});
#            $subject_alt_name = $serializer->serialize(\@list);
#        }
#    }
#
#    ## now validate the input
#    if (defined $subject_alt_name)
#    {
#        my $msg = $m->comp ('/service/create_csr/create_workflow.mhtml',
#                            'workflow_type' => $workflow_type,
#                            'role'             => $role,
#                            'profile'          => $profile,
#                            'subject_style'    => $subject_style,
#                            'keygen'           => $keygen,
#                            'subject'          => $subject,
#                            'subject_alt_name' => $subject_alt_name);
#        ## perhaps we should put this into a component like get_error.mhtml?
#        if (ref $msg and ref $msg eq "ARRAY" and
#            $msg->[0]->{LABEL} ne 'I18N_OPENXPKI_SERVER_API_WORKFLOW_MISSING_REQUIRED_FIELDS')
#        {
#            ## this must be an error
#            push @errors, @{$msg};
#        }
#    }
#    return $subject_alt_name if (not @errors and defined $subject_alt_name);
#
#    ## build hash for select fields and descriptions
#    my @values       = ();
#    my @raw          = ("email", "DNS", "IP", "URI", "DirName", "GUID", "UPN", "RID");
#
#    foreach my $key (@raw)
#    {
#        my $label = "I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_SUBJECT_ALT_NAME_".uc($key);
#        $descriptions{i18nGettext($label)} = i18nGettext($label."_DESCRIPTION");
#        push @values, {LABEL => i18nGettext($label), VALUE => $key};
#    }
#
#    ## ok we have to display the whole stuff
</%init>
<%once>
    use Template;
</%once>
