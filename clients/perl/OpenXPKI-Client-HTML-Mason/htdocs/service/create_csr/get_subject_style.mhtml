<%args>
    $workflow_type => undef
    $role          => undef
    $profile       => undef
    $subject_style => undef
</%args>
<& /service/open_form.mhtml &>
<& /lib/html/hidden_reqargs.mhtml &>

<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_STYLE_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_SUBJECT_STYLE_DESCRIPTION') %>
</p>
<select name="subject_style">
%   foreach my $key (sort keys %styles)
%   {
  <option value="<% $key %>">
    <% i18nGettext($styles{$key}->{LABEL}) %>
  </option>
%   }
</select>
<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>

<& /service/create_csr/print_descriptions.mhtml, descriptions => \@descriptions &>

<%init>
    ## load available subject styles for this profile from server
    my $msg = $context->{client}->send_receive_command_msg (
                   "get_cert_subject_styles",
                   {
                        PROFILE => $profile
                   }
    );
    my %styles = ();
    if (defined $msg->{PARAMS} && ref $msg->{PARAMS} eq 'HASH') {
        %styles = %{$msg->{PARAMS}};
    }
    # TODO - error handling

    ## if we have only one configuration
    ## then we do not need to ask the user
    if (scalar keys %styles == 1) {
        foreach my $key (keys %styles) {
            $subject_style = $key;
        }
    }

    ## return the configuration number if it exists
    return $subject_style
        if (defined $subject_style);

    ## ok, we have to ask the user
    my @descriptions = ();
    foreach my $key (sort keys %styles)
    {
        push @descriptions, [ i18nGettext($styles{$key}->{LABEL}), i18nGettext($styles{$key}->{DESCRIPTION}) ];
    }
</%init>
