<%args>
    $workflow_type => undef
    $role          => undef
    $profile       => undef
    $subject_style => undef
    $keygen        => undef
    $pkcs10        => undef
    $subject       => undef
</%args>

<& /service/open_form.mhtml &>

<& /lib/html/hidden_reqargs.mhtml &>

<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PKCS10_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PKCS10_DESCRIPTION') %>
</p>

<& /lib/html/input.mhtml, 'type' => 'file', name => 'upload' &>

<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>

<& /service/create_csr/print_errors.mhtml, 'errors' => \@errors &>

<%init>
    use CGI;
    use Data::Dumper;
    my @errors = ();
    my $msg;

    return ($pkcs10, $subject) if ($pkcs10);
    my %args = $m->request_args();

    my $file;
    eval {
        $file = $r->upload('upload');
        $file = $file->fh() if (index (ref $file, "::Upload") > -1);
    };
    if (! defined $file) {
        # eval failed, so we are apparently not using mod_perl, do it
        # 'the CGI way'
        my $query = CGI->new(\%args);
        $file = $query->upload('upload'); 
    }
    if ($file)
    {
        $pkcs10 = "";
        $pkcs10 = do {
            local $INPUT_RECORD_SEPARATOR;
            <$file>;
        };

	if ($pkcs10 =~ m{ \A (?:[0-9A-Za-z+\/=]+\s+)+ \z }xms) {
	    $pkcs10 = 
		"-----BEGIN CERTIFICATE REQUEST-----\n"
		. $pkcs10
		. "-----END CERTIFICATE REQUEST-----";
	}
    
        if ($pkcs10 !~ /-----BEGIN/) {
            # assume it is
            $msg = $context->{client}->send_receive_command_msg(
                'convert_csr',
                {
                    DATA => $pkcs10,
                    IN   => 'DER',
                    OUT  => 'PEM',
                },
            );
            if (   exists $msg->{SERVICE_MSG}
                && $msg->{SERVICE_MSG} eq 'ERROR') {
                @errors = $m->comp(
                    '/lib/get_deep_error.mhtml',
                    'msg' => $msg,
                );
            }
            else {
                $pkcs10 = $msg->{PARAMS};
            }
        }
        ## parse the CSR
        $msg = $context->{client}->send_receive_command_msg (
                      "get_csr_info_hash_from_data",
                      {DATA => $pkcs10});
        if (exists $msg->{SERVICE_MSG} and
            $msg->{SERVICE_MSG} eq "ERROR")
        {
            @errors = $m->comp ('/lib/get_deep_error.mhtml', 'msg' => $msg);
        } else {
            ## set the parameters
            $subject = $msg->{PARAMS}->{BODY}->{SUBJECT} if (not defined $subject);
            ## used for the KeyLength validator, so that the user can
            ## already be informed at that point that his key is too
            ## short/long
            $msg = $m->comp ('/service/create_csr/create_workflow.mhtml',
                            'workflow_type' => $workflow_type,
                            'role'          => $role,
                            'profile'       => $profile,
                            'subject_style' => $subject_style,
                            'pkcs10'        => $pkcs10);
            if (ref $msg eq 'ARRAY' && $msg->[0]->{'LABEL'} =~ m{ \A I18N_OPENXPKI_SERVER_WORKFLOW_VALIDATOR_KEYLENGTH }xms) {
                @errors = @{ $msg };
            }
            else {
                return ($pkcs10, $subject);
            }
        }
    }

    ## ok we have to display the whole stuff
</%init>
