<%args>
    $workflow_type => undef
    $role          => undef
    $profile       => undef
</%args>
<& /service/open_form.mhtml &>
<& /lib/html/hidden_reqargs.mhtml &>
<h1><% i18nGettext ('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PROFILE_TITLE') %></h1>
<p>
  <% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_GET_PROFILE_DESCRIPTION') %>
</p>
% if (scalar @select_values) {
<p>
<& '/lib/html/select.mhtml',
    'name'   => 'profile',
    'values' => \@select_values,
&>
<& /service/send_form.mhtml &>
<& /service/close_form.mhtml &>
</p>
% }
% else {
<% i18nGettext('I18N_OPENXPKI_CLIENT_HTML_MASON_CREATE_CSR_ERROR_NO_PROFILES_DEFINED_FOR_ROLE') %>
% }

<%init>
    ## read all profiles from the server
    my $msg = $context->{client}->send_receive_command_msg("get_cert_profiles");
    my %profiles = %{$msg->{PARAMS}};

    ## return the configuration number if it exists
    if (defined $profile and
        exists $profiles{$profile})
    {
        return $profile;
    }

    my $p_msg = $context->{client}->send_receive_command_msg(
        'get_possible_profiles_for_role',
        {
            ROLE => $role,
        },
    );
    my @possible_profiles = @{ $p_msg->{PARAMS} };

    # if we have only one configuration
    # then we don't have to ask the user
    if (scalar @possible_profiles == 1) {
        return $possible_profiles[0];
    }
    my @select_values = ();

    # only use profiles which have I18N tags, others are "abstract"
    # ones used only as a blueprint for the concrete ones
    @possible_profiles = grep { $_ =~ /^I18N/ } @possible_profiles;

    foreach my $profile (@possible_profiles) {
        push @select_values, {
            VALUE => $profile,
            LABEL => i18nGettext($profile),
        };
    }

    ## ok, we have to ask the user
</%init>
