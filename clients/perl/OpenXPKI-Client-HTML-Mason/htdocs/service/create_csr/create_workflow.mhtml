<%args>
    $workflow_type    => undef
    $role             => undef
    $profile          => undef
    $subject_style    => undef
    $subject_alt_name_parts => undef
    $subject_parts    => undef
    $info             => undef
    $keygen           => undef
    $spkac            => undef
    $pkcs10           => undef
    $key              => undef
</%args>
<%init>
    # protect against XSRF by checking for $__session_id (see
    # /service/workflow/activity/autohandler for details)
    if (! $m->request_args()->{'__session_id'}) {
        die "This looks like XSRF to me ...";
    }
    ## we must know which workflow we should use for the validation
    return if (not defined $subject_style);

    ## build PARAMS
    my %params = ();

    $params{"cert_role"}             = $role             if (defined $role);
    $params{"cert_profile"}          = $profile          if (defined $profile);
    $params{"cert_subject_style"}    = $subject_style    if (defined $subject_style);
    if (defined $subject_parts) {
        my $cert_subject_parts  = $ser->serialize($subject_parts);
        Encode::_utf8_on($cert_subject_parts);
        $params{"cert_subject_parts"}    = $cert_subject_parts;
    }
    $params{"cert_subject_alt_name_parts"} = $ser->serialize($subject_alt_name_parts) if (defined $subject_alt_name_parts);
    $params{"cert_info"}             = $ser->serialize($info)             if (defined $info);
    $params{"spkac"}                 = $spkac            if (defined $spkac);
    $params{"pkcs10"}                = $pkcs10           if (defined $pkcs10);
    $params{"private_key"}           = $key              if (defined $key);

    ## this type must always be set to intercept empty CSRs
    if ($spkac || (defined $keygen && $keygen eq "SPKAC"))
    {
        $params{"csr_type"} = "spkac";
    } else {
        $params{"csr_type"} = "pkcs10";
    }

    ## create the workflow for the new CSR
    my $msg = $context->{client}->send_receive_command_msg (
                   "create_workflow_instance",
                   {WORKFLOW => $workflow_type,
                    PARAMS   => \%params});
    my $errors = [];
    if (not ref $msg)
    {
        ## ups, this is completely unexpected
        $errors = [ {LABEL => $msg} ];
    }
    elsif (exists $msg->{SERVICE_MSG} and
           $msg->{SERVICE_MSG} eq "ERROR")
    {
        ## detected error
        $errors = [ $m->comp ('/lib/get_deep_error.mhtml', 'msg' => $msg) ];
    }
    ## handle errors
    return $errors if (scalar @{$errors});

    ## this should be a serial number of the workflow
    return $msg;
</%init>
<%once>
    use OpenXPKI::Serialization::Simple;
    my $ser = OpenXPKI::Serialization::Simple->new();
    use Encode;
</%once>
